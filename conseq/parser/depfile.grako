@@eol_comments :: /#.*?$/

triple_dbl_quoted_string = /"""(?:[^"]|"{1,2}(?!"))+"""/ ;
dbl_quoted_string = /"[^"]*"/ ;
triple_squoted_string = /'''(?:[^']|'{1,2}(?!'))+'''/ ;
squoted_string = /'[^']*'/ ;
quoted_string = triple_dbl_quoted_string | dbl_quoted_string | squoted_string | triple_squoted_string ;

identifier = /[A-Za-z]+[A-Za-z0-9_+-]*/ ;
url = /\S+/ ;

json_value = quoted_string | json_obj ;
json_name_value_pair = quoted_string ":" json_value ;
json_obj = "{" json_name_value_pair { "," json_name_value_pair }* "}" ;

query_variable = identifier ;
query_name_value_pair = quoted_string ":" ( json_value | query_variable ) |
    quoted_string "~" quoted_string ;
query_obj = "{" query_name_value_pair { "," query_name_value_pair }* "}" ;

input_spec_each = identifier "=" query_obj ;
input_spec_all = identifier "=" "all" query_obj ;
input_spec = input_spec_each | input_spec_all ;
input_specs = input_spec { "," input_spec }* ;

output_specs = json_obj { "," json_obj } ;

r_flock_file = "include" quoted_string |
    quoted_string ;
r_flock_files = r_flock_file {"," r_flock_file}* ;

output_type = identifier { "?" | "+" | {} } ;
output_types = output_type { "," output_type }+ ;

statement = ( "inputs" ":" input_specs |
  "outputs" ":" output_specs |
  "run" quoted_string [ "with" quoted_string ] |
  "submit-r-flock" quoted_string r_flock_files |
  "expect-outputs" ":" output_types |
  "options" ":" identifier { "," identifier }* )  ;
statements = { statement }+ ;

rule = "rule" identifier ":" statements ;

xref = "xref" url json_obj ;

add_if_missing = "add-if-missing" json_obj ;

type_def = "type" identifier "has" "(" identifier { "," identifier }* ")" ;

var_stmt = "let" identifier "=" quoted_string ;

include_stmt = "include" quoted_string ;

declarations =  { rule | xref | include_stmt | var_stmt | add_if_missing | type_def }+  $ ;
