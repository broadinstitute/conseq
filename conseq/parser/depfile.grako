@@grammar :: depfile
@@eol_comments :: /#.*?$/

# different flavors of strings
triple_dbl_quoted_string = /"""(?:[^"]|"{1,2}(?!"))+"""/ ;
dbl_quoted_string = /"[^"]*"/ ;
triple_squoted_string =    /'''(?:[^']|'{1,2}(?!'))+'''/ ;
squoted_string = /'[^']*'/ ;
quoted_string = triple_dbl_quoted_string | dbl_quoted_string | triple_squoted_string | squoted_string  ;

identifier = /[A-Za-z]+[A-Za-z0-9_+-]*/ ;

# json grammar
json_value =
    quoted_string
    | json_obj
    | json_array
    ;

json_array =
    "[" first:json_value rest:{"," value:json_value} * "]"
    | "[" "]"
    ;

json_name_value_pair =
    name:quoted_string ":" value:json_value
    ;

# allow "," delimited, but also accept an extra trailing ","
json_obj = "{" first:json_name_value_pair rest:{ "," json_name_value_pair }* [ "," ] "}"
    ;

# artifact queries
query_variable = identifier
    ;

query_name_value_pair =
    quoted_string ":" ( json_value | query_variable )
    | quoted_string "~" quoted_string
    ;

pattern_based_query_obj = "{" query_name_value_pair { "," query_name_value_pair }* "}"
    ;

fileref_option = "copy_to"
    ;

fileref_query_obj = ( "fileref" | "filename" ) "(" filename:quoted_string options:{ "," fileref_option "=" quoted_string } * ")"
    ;

query_obj = pattern_based_query_obj
    | fileref_query_obj
    ;

input_spec_each = identifier "=" query_obj
    ;
input_spec_all = identifier "=" "all" query_obj
    ;
input_spec = input_spec_each
    | input_spec_all
    ;

# input specs are generally "," delimited, but also accept an extra trailing ","
input_specs = input_spec { "," input_spec }* [ "," ]
    ;

# outputs
output_specs = json_obj { "," json_obj } [ "," ]
    | "none"
    ;

construct_cache_key_run = 
    "construct-cache-key-run" quoted_string [ "with" quoted_string ]
    ;

run_statement =
    "run" quoted_string [ "with" quoted_string ]
    ;

file_list = quoted_string { "," quoted_string }*
    ;

rule_parameters = ("inputs" ":" input_specs |
    "outputs" ":" output_specs |
    "outputs-expected" ":" ( identifier {"," identifier} * ) |
    "executor" ":" identifier |
    "watch-regex" ":" quoted_string |
    "publish" ":" quoted_string |
    "resources" ":" json_obj | 
    "uses" ":" file_list )    
    ;

rule = "rule" name:identifier ":" 
    params:{ rule_parameters } * 
    cachekeystmts:{ construct_cache_key_run } *
    stmts:{ run_statement } *
    ;

# allow either keyword
add_if_missing = { "add-if-missing" | "add-artifact" } json_obj ;

remember_executed_input = "input" quoted_string ":" {json_obj | json_array};
remember_executed_output = "output" ":" json_obj;
remember_executed = "remember-executed" "transform" ":" quoted_string { remember_executed_input } * { remember_executed_output } * ;

exec_profile = "exec-profile" identifier json_obj;

var_stmt = "let" identifier "=" quoted_string ;

include_stmt = "include" quoted_string ;

conditional_expr = quoted_string
    ;

eval_statement = "eval" quoted_string ;

conditional = "if" condition:conditional_expr ":" true_body:declarations elif_clauses:{ "elif" conditional_expr ":" declarations }* else_clause:[ "else" ":" declarations ] "endif" ;

type_definition_field = ( "description" ":" quoted_string | "required" ":" json_array ) ;
type_definition = "{"  type_definition_field {"," type_definition_field}* "}";
type_def_stmt = "type" identifier "=" type_definition ;

declarations = { rule | include_stmt | var_stmt | add_if_missing | exec_profile | remember_executed | conditional | eval_statement | type_def_stmt }+ ;

all_declarations = [ declarations ] $ ;
